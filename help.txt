Usage: hastec [OPTIONS] FILES

To compile a program with a main function residing in prog.hs:

  hastec prog.hs

The resulting code may be a bit on the large and/or slow side. For release
builds, using --opt-all is strongly recommended. For debugging, use the --debug
option to increase the readability of the produced code somewhat.

By default, programs start executing when the window.onload event fires.
This is not always what we want. For instance, when running the test suite
we want the program to start executing immediately upon being loaded into
the interpreter. This behavior can be controlled using the --onload, --onexec
and --start options.

A summary of the available options is given below.

--annotate-externals
  Annotate all JavaScript-native symbols and inline JavaScript in generated
  code with /* EXTERNAL */.

--annotate-symbols
  Annotate all non-external, non-local symbols with their qualified Haskell
  names.

--debug
  Output annotated, pretty-printed JavaScript code. Equivalent to
  --annotate-externals --annotate-symbols --pretty-print.

--ddisable-js-opts
  Don't perform any optimizations on the JavaScript at all. This notably
  includes tail call optimization.

--dtrace-primops
  Trace primops. Not really useful unless Haste was booted with primop tracing
  enabled.

--dont-link
  Don't link generated .jsmod files into a .js blob.

--full-unicode
  Enable full generalCategory Unicode support. May bloat output by upwards of
  150 KB.

-?, --help
  Display this message.

--link-jslib[=FILE]
  Create a jslib file instead of an executable.

--no-use-strict
  Do not emit '"use strict";' declaration. Does not affect minifier behavior,
  but *does* affect any external JavaScript included using --with-js.

--onexec
  Launch application immediately when the JavaScript file is loaded. Shorthand
  for --start=onexec.

--onload
  Launch application on window.onload. Shorthand for --start=onload.

--opt-all
  Enable all safe optimizations except minification. Individual optimizations
  may be turned off using their individual flags.

--opt-anonymous-objects-only[=on/off]
  Only use anonymous objects to represent ADTs. Will make all programs slightly
  smaller, some programs slightly faster, and some programs a lot slower.

--opt-detrampoline-threshold=N
  Remove trampolining and tail calls for provably finite tail call chains
  shorter than N calls. Set to 0 to disable entirely.

--opt-flow-analysis[=on/off]
  Enable whole program flow analysis. Highly experimental and possibly slow
  and/or incorrect. Don't use for now.

--opt-inline-ffi-primitives[=on/off]
  Inline FFI call primitives wherever possible.

--opt-minify[=on/off]
  Minify JavaScript output using Google Closure compiler.

--opt-minify-flag=FLAG
  Pass a flag to Closure. To minify programs in strict mode, use
  --opt-minify-flag='--language_in=ECMASCRIPT5_STRICT'

--opt-proper-tailcalls[=on/off]
  Use trampolining to implement proper tail calls. Enabled by default.

--opt-tail-chain-bound=N
  Bound tailcall chains to N stack frames. Default is 1.

--opt-tail-loop-transform[=on/off]
  Optimize tail recursive functions into loops when possible. Enabled by
  default.

--opt-unsafe
  Enable all optimizations, safe and unsafe. Equivalent to --opt-all
  --opt-unsafe-ints

--opt-unsafe-ints
  Enable unsafe Int arithmetic. Implies --opt-unsafe-mult --opt-vague-ints

--opt-unsafe-mult[=on/off]
  Use JavaScript's built-in multiplication operator for fixed precision integer
  multiplication. This may speed up Int multiplication by a factor of at least
  four, but may give incorrect results when the product falls outside the
  interval [-2^52, 2^52]. In browsers which support Math.imul, this
  optimization will likely be slower than the default.

--opt-vague-ints[=on/off]
  Int math has 53 bits of precision, but gives incorrect results rather than
  properly wrapping around when those 53 bits are exceeded. Bitwise operations
  still only work on the lowest 32 bits.

--opt-whole-program[=on/off]
  Perform optimizations over the whole program during linking. May
  significantly increase link time.

--overwrite-scrutinees
  Overwrite scrutinees when evaluated rather than allocating a new local for
  the evaluated value. This is largely experimental.

-o FILE, --out=FILE
  Write JavaScript output to FILE.

--outdir=DIR
  Write intermediate files to DIR.

--output-html
  Write the JavaScript output to an HTML file together with a minimal HTML
  skeleton.

--own-namespace
  Wrap the whole program in a closure to avoid polluting the global namespace.
  Incurs a performance hit, and makes minification slightly less effective.

--preserve-names
  Preserve Haskell names in JavaScript code as far as possible. Highly
  experimental and may break your code.

--pretty-print
  Pretty-print JavaScript output.

--start=CODE
  Specify custom start code. '$HASTE_MAIN' will be replaced with the
  application's main function. For instance,
  --start='$("foo").onclick($HASTE_MAIN);' will use jQuery to launch the
  application whenever the element with the id "foo" is clicked.

--output-jsflow
  Output code for use with the JSFlow interpreter. Note that this may leave
  your code crippled, since JSFlow doesn't all of Haste's needs.

-v, --verbose
  Display even the most obnoxious warnings and messages.

--with-js=FILES
  Link the given comma-separated list of JavaScript files into the final .js
  file.


